includes:
	- jobs.neon
	- gate.neon
	- roadrunner.neon
	- console.neon
	- symfony.neon
extensions:
	cache: Lsr\Caching\DI\CacheExtension
	decorator: Nette\DI\Extensions\DecoratorExtension
	inject: Nette\DI\Extensions\InjectExtension
	routing: Lsr\Core\Routing\DI\RoutingExtension
parameters:
	db:
		driver: mysqli
		lazy: true
		host: db
		port: 3306
		collate: utf8mb4
		database: lac
		user: root
		password: 'laser-arena-control'
	gotenberg:
		host: gotenberg
		port: 3000
	gamesSync:
		limit: 200
		timeout: 20.0
	redis:
		host: redis
	fairTeams:
		maxIterations: 1000
		maxIterationsWithoutImprovement: 100
services:
	# Core
	db.connection: Lsr\Db\Connection(config: %db%)
	app: App\Core\App
	translations:
		create: Lsr\Core\Translations
		arguments:
			config: @config
			defaultLang: 'cs_CZ'
			supportedLanguages:
				- 'cs_CZ'
				- 'en_US'
				- 'de_DE'
				- 'fr_FR'
				- 'sk_SK'
				- 'es_ES'
			textDomains:
				- 'results'
				- 'gate'
				- 'tips'
				- 'cli'
				- 'highlights'
				- 'tournament'

	version: App\Services\VersionService
	regression: App\Services\RegressionCalculator

	image: App\Services\ImageService([1000,600,250])

	redis:
		create: \Redis
		setup:
			- connect(%redis.host%)

	cache.journal: Lsr\Caching\Redis\RedisJournal(@redis)
	cache.storage: Lsr\Caching\Redis\RedisStorage(@redis, '', @cache.journal)

	templating.latte.lac:
		create: App\Latte\LacExtension
		tags:
			- templating

	templating.latte.engine:
		setup:
			- addExtension(@templating.latte.lac)

	events: App\Services\EventService
	features:
		create: App\Services\FeatureConfig
		arguments:
			config: @config
			default:
				liga: true
				tournaments: true
				preparedgames: true
				event_server: true
				control: false
				gates: false
				groups: true
				tables: true
				rtsp: true

	guzzle: App\Services\GuzzleFactory
	liga: App\Services\LaserLiga\LigaApi::getInstance(@metrics, @symfony.serializer, @guzzle)
	playersProvider: App\Services\LaserLiga\PlayerProvider
	playersSynchronization: App\Services\LaserLiga\PlayerSynchronizationService

	gamesImport: App\Services\ImportService
	gamesLoad: App\Tools\GameLoading\GameLoader

	gotenberg: App\Services\GotenbergService(%gotenberg.host%, %gotenberg.port%)
	resultPrint: App\Services\ResultPrintService
	resultPrecache: App\Services\ResultsPrecacheService(mode: 'queue')

	lasermaxx.regression: App\GameModels\Tools\Lasermaxx\RegressionStatCalculator
	evo5.simulator: App\Services\Evo5\GameSimulator
	evo5.gameLoader: App\Tools\GameLoading\Evo5GameLoader
	evo6.gameLoader: App\Tools\GameLoading\Evo6GameLoader

	result.parser: App\Tools\ResultParsing\ResultsParser
	result.parser.evo5: App\Tools\ResultParsing\Evo5\ResultsParser
	result.parser.evo6: App\Tools\ResultParsing\Evo6\ResultsParser

	gameHighlight: App\Services\GameHighlight\GameHighlightService(tagged(highlightChecker))

	fontawesome: App\Services\FontAwesomeManager

	theme:
		type: App\Models\DataObjects\Theme
		create: App\Models\DataObjects\Theme::get()

	fairteams: App\Services\FairTeams(%fairTeams%)

cache:
	cacheDir: %constants.tempDir%
routing:
	routeFiles:
		- %constants.appDir%routes
	controllers:
		- %constants.appDir%src/Controllers

search:
	highlightCheckers:
		in: '%constants.appDir%/src/Services/GameHighlight/Checkers'
		implements:
			- App\Services\GameHighlight\GameHighlightChecker
			- App\Services\GameHighlight\PlayerHighlightChecker
			- App\Services\GameHighlight\TeamHighlightChecker
		tags:
			- highlightChecker

decorator:
	Lsr\Core\Controllers\Controller:
		inject: true